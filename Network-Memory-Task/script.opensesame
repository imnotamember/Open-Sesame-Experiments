# Generated by OpenSesame 0.27.4 (Frisky Freud)
# Thu Nov 13 17:06:00 2014 (posix)
# <http://www.cogsci.nl/opensesame>

set mouse_backend "xpyriment"
set subject_parity "even"
set height "768"
set font_family "mono"
set font_italic "no"
set synth_backend "legacy"
set title "New experiment"
set coordinates "relative"
set start "experiment"
set sampler_backend "legacy"
set transparent_variables "no"
set foreground "white"
set font_bold "no"
set description "Default description"
set background "black"
set response "None##########"
set font_size "18"
set keyboard_backend "legacy"
set canvas_backend "xpyriment"
set compensation "0"
set bidi "no"
set subject_nr "0"
set width "1024"

define inline_script nBack_Evaluation
	___run__
	print "Response was %s" % (self.get('response'))
	print "Correct Button was %s" % (self.get('correctButton'))
	
	if self.get('srbox_onOff') == 1:
		if type(self.get('response')) is int:
			if self.get('correct') == 1:
				respEval = 'correct'
			else:
				respEval = 'incorrect'
		else:
			respEval = 'uncertain'
	else:
		if self.get('response') is 'unicode':
			if self.get('correct') == 1:
				respEval = 'correct'
			else:
				respEval = 'incorrect'
		else:
			respEval = 'uncertain'
	__end__
	___prepare__
	#nBackRound = nBackRound + 1
	nBackImage = self.get('picture')
	#exp.items['Red_netMemTask'].matrix[nBackRound + 1]['lastPicture'] = nBackImage
	prevPictureList.append(nBackImage)
	print nBackImage
	print prevPictureList
	__end__
	set description "Executes Python code"

define keyboard_response PauseBreak
	set correct_response "space"
	set allowed_responses "space"
	set description "Collects keyboard responses"
	set timeout "infinite"
	set flush "yes"

define sketchpad End_trials
	set duration "keypress"
	set description "Displays stimuli"
	draw rect -512 -384 1024 768 fill=1 penwidth=1 color=[conditionColor] show_if="always"
	draw textline 0 0 "Great Job! This concludes section [conditionColor]" center=1 color=[textColor] font_family="mono" font_size=32 font_italic=no font_bold=no show_if="always" html="yes"

define logger exp_time_logger
	set ignore_missing "yes"
	set description "Logs experimental data"
	set auto_log "no"
	set use_quotes "yes"
	log "total_time_seconds"
	log "total_time_minutes"
	log "total_time"

define logger nBack_logger
	set ignore_missing "yes"
	set description "Logs experimental data"
	set auto_log "yes"
	set use_quotes "yes"
	log "iName"
	log "stimtag"
	log "i"
	log "k"
	log "j"
	log "version"
	log "jName"
	log "stimNum"
	log "lastPicture"
	log "count_Empty"
	log "miss"
	log "match"
	log "Version"
	log "count_nBack_sequence"
	log "count_experiment"
	log "picture"
	log "correctButton"
	log "count_dataCollection"
	log "count_SetButtons"
	log "count_sequence"
	log "egiOn"
	log "count_Blue_netMemTask"
	log "count_Red_netMemTask"
	log "count_trial_sequence"
	log "conditionColor"
	log "count_White_netMemTask"

define loop Blue_net2
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "Empty"
	set break_if "never"
	set column_order ""
	set cycles "0"
	set order "random"
	run Empty

define loop Blue_Data
	set repeat "0.1"
	set description "Repeatedly runs another item"
	set item "trial_sequence"
	set break_if "never"
	set column_order ""
	set cycles "57"
	set order "random"
	run trial_sequence

define inline_script NMT_EEG_Tag
	___run__
	if respEval == 'uncertain':
		btn = self.get('response').encode('utf-8')
	else:
		btn = self.get('response')
	stimtag = self.get('stimtag').encode('utf-8')
	cndclr = self.get('conditionColor').encode('utf-8')
	
	ns.send_event( 'evt_', label="event", timestamp=egi.ms_localtime(), table = {'exp-': 'NMT', 'btn-' : btn, 'eval' : respEval, 'net-' : stimtag, 'colr' : cndclr} )
	#'net-' : self.get('stimtag')
	#'colr': self.get('conditionColor')
	__end__
	set _prepare ""
	set description "Executes Python code"

define loop NMT_timer
	set repeat "4"
	set description "Repeatedly runs another item"
	set skip "0"
	set item "Timer_sequence"
	set break_if "never"
	set column_order ""
	set cycles "60"
	set order "sequential"
	run Timer_sequence

define sketchpad Directions_Behavioral
	set duration "keypress"
	set description "Displays stimuli"
	draw textline 0 -224 "Welcome to the experiment." center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 -96 "If you need to pause during the trials, press P." center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 0 "If you need to quit the experiment, press esc." center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 288 "Press any key to begin." center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 96 "You are set up to run this as a Behavioral experiment!" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 160 "If you need to run this for an EEG study, quit the experiment and set egiOn to 1." center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"

define sketchpad Directions_EEG
	set duration "keypress"
	set description "Displays stimuli"
	draw textline 0 -224 "Welcome to the experiment." center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 -96 "If you need to pause during the trials, press P." center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 0 "If you need to quit the experiment, press esc." center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 96 "You are set up to run this as an EEG experiment!" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 160 "If you need to run this as a Behavioral study, quit the experiment and set egiOn to 0." center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 288 "Press any key to begin." center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"

define loop White_loop
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "White_netMemTask"
	set column_order ""
	set cycles "1"
	set order "random"
	run White_netMemTask

define inline_script timer_code
	set _run ""
	___prepare__
	timerCount = exp.items['Timer_sequence'].count - 1
	
	def timeReductor(timeVar):
		#print "timeVar = %d" % timeVar
		while timeVar > 59:
			print "timeVar > 59"
			timeVar = timeVar - 60
		#print "timeVar < 59"
		return timeVar
	
	timerCount = timeReductor(timerCount)
	
	#print type(timerCount)
	tens = 5 - timerCount//10
	ones = 10 - timerCount%10
	if ones == 10:
		tens += 1
		ones = 0
	tR = self.get('timerRepeat')
	exp.set('minutes', tR)
	if timerCount == 0:
		exp.set('timerRepeat', self.get('timerRepeat') - 1)
		tens = 0
		ones = 0
	#print 'minutes = %d tens = %d ones = %d' % (self.get('minutes'), tens, ones)
	exp.set('secTens', tens)
	exp.set('secOnes', ones)
	#print self.get('timerRepeat'), timerCount
	__end__
	set description "Executes Python code"

define loop Red_loop
	set repeat "1"
	set description "Repeatedly runs another item"
	set skip "0"
	set item "Red_netMemTask"
	set break_if "never"
	set column_order "lastPicture"
	set cycles "1"
	set order "sequential"
	setcycle 0 lastPicture "0"
	run Red_netMemTask

define sketchpad face
	set duration "0"
	set description "Displays stimuli"
	draw image 0 0 "[picture].bmp" scale=1 center=1 show_if="always"
	draw textline -352 320 "Not a match" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="[match] = 'm'" html="yes"
	draw textline 352 320 "Match" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="[match] = 'm'" html="yes"
	draw textline -352 320 "Match" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="[match] = 'z'" html="yes"
	draw textline 352 320 "Not a match" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="[match] = 'z'" html="yes"
	draw textline -352 352 "Press Z" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 352 352 "Press M" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"

define inline_script Evaluation
	___run__
	print '#################'
	
	print type(self.get('response'))
	
	if self.get('srbox_onOff') == 1:
		if type(self.get('response')) is int:
			if self.get('correct') == 1:
				respEval = 'correct'
			else:
				respEval = 'incorrect'
		else:
			respEval = 'uncertain'
	else:
		if self.get('response').lower() == 'z' or  self.get('response').lower() == 'm':
			if self.get('correct') == 1:
				respEval = 'correct'
			elif self.get('correct') == 0:
				respEval = 'incorrect'
		else:
			respEval = 'uncertain'
	
	print self.get('stimtag')
	print self.get('response')
	print respEval
	print self.get('correct')
	__end__
	set _prepare ""
	set description "Executes Python code"

define sequence Empty
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"

define loop Match4
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "Empty"
	set break_if "never"
	set column_order "miss;match"
	set cycles "1"
	set order "random"
	setcycle 0 miss "1"
	setcycle 0 match "4"
	run Empty

define loop Blue_net3
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "Empty"
	set break_if "never"
	set column_order ""
	set cycles "0"
	set order "random"
	run Empty

define loop Match1
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "Empty"
	set break_if "never"
	set column_order "miss;match"
	set cycles "1"
	set order "random"
	setcycle 0 miss "4"
	setcycle 0 match "1"
	run Empty

define sketchpad Before_EEG
	set duration "keypress"
	set description "Displays stimuli"
	draw rect -512 -384 1024 768 fill=1 penwidth=1 color=[conditionColor] show_if="always"
	draw textline 0 96 "Press any key when ready." center=1 color=[textColor] font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 0 "Experimenter: Please begin a '[conditionColor]' Netstation session before continuing." center=1 color=[textColor] font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"

define loop Red_Data
	set repeat "1"
	set description "Repeatedly runs another item"
	set skip "0"
	set item "trial_sequence"
	set break_if "never"
	set column_order ""
	set cycles "57"
	set order "random"
	run trial_sequence

define sketchpad iName_jName
	set duration "0"
	set description "Displays stimuli"
	draw textline 0 -64 "[iName]" center=1 color=white font_family="mono" font_size=42 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 64 "[jName]" center=1 color=white font_family="mono" font_size=42 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline -352 320 "No Relationship" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="[match] = 'm'" html="yes"
	draw textline 352 320 "Has Relationship" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="[match] = 'm'" html="yes"
	draw textline -352 320 "Has Relationship" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="[match] = 'z'" html="yes"
	draw textline 352 320 "No Relationship" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="[match] = 'z'" html="yes"
	draw textline -352 352 "Press Z" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 352 352 "Press M" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"

define sequence nBack_sequence
	set flush_keyboard "no"
	set description "Runs a number of items in sequence"
	run nBack_code "always"
	run Blink_slide "always"
	run PauseKey "always"
	run Fixation "always"
	run PauseKey "always"
	run PauseScreen "[response] = p"
	run PauseBreak "[response] = p"
	run Fixation "[response] = space"
	run face "always"
	run srbox "[srbox_onOff] = 1"
	run keyboard_response "[srbox_onOff] = 0"
	run nBack_Evaluation "always"
	run nBack_EEG_Tag "[egiOn]  =  1"
	run nBack_logger "always"

define sequence sequence
	run Red_loop "[conditionColor] = Red"
	run Blue_loop "[conditionColor] = Blue"
	run White_loop "[conditionColor] = White"

define loop MatchLeft
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "Empty"
	set break_if "never"
	set column_order "miss;match"
	set cycles "1"
	set order "random"
	setcycle 0 miss "m"
	setcycle 0 match "z"
	run Empty

define inline_script clear_variables
	___run__
	prevPictureList = []
	print prevPictureList
	print self.get('count_nBack_sequence')
	exp.items['nBack_sequence'].count = 0
	exp.items['trial_sequence'].count = 0
	print self.get('count_nBack_sequence')
	print prevPictureList
	__end__
	set _prepare ""
	set description "Executes Python code"

define loop White_Data
	set repeat "0.1"
	set description "Repeatedly runs another item"
	set item "trial_sequence"
	set break_if "never"
	set column_order ""
	set cycles "57"
	set order "random"
	run trial_sequence

define sketchpad PauseScreen
	set duration "0"
	set description "Displays stimuli"
	draw textline 0 -64 "The experiment is paused." center=1 color=white font_family="mono" font_size=48 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 64 "Press the spacebar to continue." center=1 color=white font_family="mono" font_size=48 font_italic=no font_bold=no show_if="always" html="yes"

define sketchpad Blink_slide
	set duration "1500"
	set description "Displays stimuli"

define sequence experiment
	run start_time "always"
	run Initilization "always"
	run Directions_EEG "[egiOn] = 1"
	run Directions_Behavioral "[egiOn] = 0"
	run inline_script "always"
	run EEG_Initilize "[egiOn]  =  1"
	run loop "always"
	run Close_EEG "[egiOn] = 1"
	run logger "always"
	run end_time "always"
	run exp_time_logger "always"

define loop nBack
	set repeat "0.75"
	set description "Repeatedly runs another item"
	set item "nBack_sequence"
	set break_if "never"
	set column_order "picture;lastPicture"
	set cycles "60"
	set order "random"
	setcycle 0 picture "1"
	setcycle 0 lastPicture ""
	setcycle 1 picture "2"
	setcycle 1 lastPicture ""
	setcycle 2 picture "3"
	setcycle 2 lastPicture ""
	setcycle 3 picture "4"
	setcycle 3 lastPicture ""
	setcycle 4 picture "5"
	setcycle 4 lastPicture ""
	setcycle 5 picture "6"
	setcycle 5 lastPicture ""
	setcycle 6 picture "7"
	setcycle 6 lastPicture ""
	setcycle 7 picture "8"
	setcycle 7 lastPicture ""
	setcycle 8 picture "9"
	setcycle 8 lastPicture ""
	setcycle 9 picture "10"
	setcycle 9 lastPicture ""
	setcycle 10 picture "11"
	setcycle 10 lastPicture ""
	setcycle 11 picture "12"
	setcycle 11 lastPicture ""
	setcycle 12 picture "13"
	setcycle 12 lastPicture ""
	setcycle 13 picture "14"
	setcycle 13 lastPicture ""
	setcycle 14 picture "15"
	setcycle 14 lastPicture ""
	setcycle 15 picture "16"
	setcycle 15 lastPicture ""
	setcycle 16 picture "17"
	setcycle 16 lastPicture ""
	setcycle 17 picture "18"
	setcycle 17 lastPicture ""
	setcycle 18 picture "19"
	setcycle 18 lastPicture ""
	setcycle 19 picture "20"
	setcycle 19 lastPicture ""
	setcycle 20 picture "21"
	setcycle 20 lastPicture ""
	setcycle 21 picture "22"
	setcycle 21 lastPicture ""
	setcycle 22 picture "23"
	setcycle 22 lastPicture ""
	setcycle 23 picture "24"
	setcycle 23 lastPicture ""
	setcycle 24 picture "25"
	setcycle 24 lastPicture ""
	setcycle 25 picture "26"
	setcycle 25 lastPicture ""
	setcycle 26 picture "27"
	setcycle 26 lastPicture ""
	setcycle 27 picture "28"
	setcycle 27 lastPicture ""
	setcycle 28 picture "29"
	setcycle 28 lastPicture ""
	setcycle 29 picture "30"
	setcycle 29 lastPicture ""
	setcycle 30 picture "31"
	setcycle 30 lastPicture ""
	setcycle 31 picture "32"
	setcycle 31 lastPicture ""
	setcycle 32 picture "33"
	setcycle 32 lastPicture ""
	setcycle 33 picture "34"
	setcycle 33 lastPicture ""
	setcycle 34 picture "35"
	setcycle 34 lastPicture ""
	setcycle 35 picture "36"
	setcycle 35 lastPicture ""
	setcycle 36 picture "37"
	setcycle 36 lastPicture ""
	setcycle 37 picture "38"
	setcycle 37 lastPicture ""
	setcycle 38 picture "39"
	setcycle 38 lastPicture ""
	setcycle 39 picture "40"
	setcycle 39 lastPicture ""
	setcycle 40 picture "41"
	setcycle 40 lastPicture ""
	setcycle 41 picture "42"
	setcycle 41 lastPicture ""
	setcycle 42 picture "43"
	setcycle 42 lastPicture ""
	setcycle 43 picture "44"
	setcycle 43 lastPicture ""
	setcycle 44 picture "45"
	setcycle 44 lastPicture ""
	setcycle 45 picture "46"
	setcycle 45 lastPicture ""
	setcycle 46 picture "47"
	setcycle 46 lastPicture ""
	setcycle 47 picture "48"
	setcycle 47 lastPicture ""
	setcycle 48 picture "49"
	setcycle 48 lastPicture ""
	setcycle 49 picture "50"
	setcycle 49 lastPicture ""
	setcycle 50 picture "51"
	setcycle 50 lastPicture ""
	setcycle 51 picture "52"
	setcycle 51 lastPicture ""
	setcycle 52 picture "53"
	setcycle 52 lastPicture ""
	setcycle 53 picture "54"
	setcycle 53 lastPicture ""
	setcycle 54 picture "55"
	setcycle 54 lastPicture ""
	setcycle 55 picture "56"
	setcycle 55 lastPicture ""
	setcycle 56 picture "57"
	setcycle 56 lastPicture ""
	setcycle 57 picture "58"
	setcycle 57 lastPicture ""
	setcycle 58 picture "59"
	setcycle 58 lastPicture ""
	setcycle 59 picture "60"
	setcycle 59 lastPicture ""
	run nBack_sequence

define logger logger

define inline_script nBack_code
	set _run ""
	___prepare__
	ISI = random.randint(1000, 1250)
	exp.set("ISI", ISI)
	
	
	print self.get('count_nBack_sequence')
	nBackRound = self.get('count_nBack_sequence')
	''' This section is outdated
	if nBackRound >= 16:
		nBackRound = nBackRound - 16
	elif nBackRound >= 8:
		nBackRound = nBackRound - 8
	'''
	if nBackRound > 2:
		x = random.randint(0, 100)
		if x < 50:
			#exp.set('picture', self.get('lastPicture', nBackRound - 2))
			print "nBacked!"
			exp.set('picture', prevPictureList[nBackRound - 2])
			exp.set('correctButton', self.get('match'))
		else:
			exp.set('correctButton', self.get('miss'))
	else:
		exp.set('correctButton', self.get('miss'))
	__end__
	set description "Executes Python code"

define sequence SetButtons
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run Match1 "[subject_parity] = even and [srbox_onOff] = 1"
	run Match4 "[subject_parity] = odd and [srbox_onOff] = 1"
	run MatchRight "[subject_parity] = even and [srbox_onOff] = 0"
	run MatchLeft "[subject_parity] = odd and [srbox_onOff] = 0"

define inline_script ISI_script
	set _run ""
	___prepare__
	ISI = random.randint(1000, 1250)
	exp.set("ISI", ISI)
	
	
	if self.get('stimNum') < 3:
		exp.set('correctButton', self.get('match'))
	else:
		exp.set('correctButton', self.get('miss'))
	
	theCount = exp.items['trial_sequence'].count
	exp.set('thisCount', theCount % 18)
	print self.get('thisCount')
	__end__
	set description "Executes Python code"

define sketchpad NMT_Welcome
	set duration "keypress"
	set description "Displays stimuli"
	draw rect -512 -384 1024 768 fill=1 penwidth=1 color=[conditionColor] show_if="always"
	draw textline 0 -288 "This is the [conditionColor] portion of the experiment." center=1 color=[textColor] font_family="mono" font_size=32 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 -192 "You will read a selection given by the experimenter now." center=1 color=[textColor] font_family="mono" font_size=32 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 192 "Press any key when ready to begin." center=1 color=[textColor] font_family="mono" font_size=32 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 -96 "You will have 4 minutes to read." center=1 color=[textColor] font_family="mono" font_size=32 font_italic=no font_bold=no show_if="always" html="yes"

define loop Blue_null3
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "Empty"
	set break_if "never"
	set column_order ""
	set cycles "0"
	set order "random"
	run Empty

define sketchpad NMT_directions
	set duration "keypress"
	set description "Displays stimuli"
	draw rect -512 -384 1024 768 fill=1 penwidth=1 color=[conditionColor] show_if="always"
	draw textline 0 128 "If you aren't sure, don't press anything." center=1 color=[textColor] font_family="mono" font_size=24 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 64 "press [miss]." center=1 color=[textColor] font_family="mono" font_size=24 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 10 "If the NAMES presented DO NOT HAVE a RELATIONSHIP" center=1 color=[textColor] font_family="mono" font_size=24 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 -96 "press [match]." center=1 color=[textColor] font_family="mono" font_size=24 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 -160 "If the NAMES presented DO HAVE a RELATIONSHIP" center=1 color=[textColor] font_family="mono" font_size=24 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 -288 "You will now be shown the names of people." center=1 color=[textColor] font_family="mono" font_size=24 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 224 "Experimenter: Press any key when ready to begin." center=1 color=[textColor] font_family="mono" font_size=24 font_italic=no font_bold=no show_if="always" html="yes"

define loop MatchRight
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "Empty"
	set break_if "never"
	set column_order "miss;match"
	set cycles "1"
	set order "random"
	setcycle 0 miss "z"
	setcycle 0 match "m"
	run Empty

define inline_script start_time
	set _run ""
	set _prepare "exp_start_time = self.time()"
	set description "Executes Python code"

define loop Red_null3
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "Empty"
	set break_if "never"
	set column_order ""
	set cycles "0"
	set order "random"
	run Empty

define sketchpad Reinforcement
	set duration "2000"
	set description "Displays stimuli"
	draw textline 0 0 "Good job! Keep it up!" center=1 color=green font_family="mono" font_size=48 font_italic=no font_bold=no show_if="always" html="yes"

define sequence Timer_sequence
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run timer_code "always"
	run Timer "always"

define loop White_net3
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "Empty"
	set break_if "never"
	set column_order ""
	set cycles "0"
	set order "random"
	run Empty

define loop White_net2
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "Empty"
	set break_if "never"
	set column_order ""
	set cycles "0"
	set order "random"
	run Empty

define sequence dataCollection
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run Red_net2 "always"
	run Red_net3 "always"
	run Red_null2 "always"
	run Red_null3 "always"
	run Blue_net2 "always"
	run Blue_net3 "always"
	run Blue_null2 "always"
	run Blue_null3 "always"
	run White_net2 "always"
	run White_net3 "always"
	run White_null2 "always"
	run White_null3 "always"

define sequence trial_sequence
	set flush_keyboard "no"
	set description "Runs a number of items in sequence"
	run ISI_script "always"
	run Blink_slide "always"
	run Fixation "always"
	run PauseKey "always"
	run PauseScreen "[response] = p"
	run PauseBreak "[response] = p"
	run Fixation "[response] = space"
	run iName "always"
	run iName_jName "always"
	run srbox "[srbox_onOff] = 1"
	run keyboard_response "[srbox_onOff] = 0"
	run Evaluation "always"
	run NMT_EEG_Tag "[egiOn]  =  1"
	run NMT_logger "always"
	run Reinforcement "[thisCount] = 0"

define inline_script Close_EEG
	set _run "ns.disconnect()"
	set _prepare ""
	set description "Executes Python code"

define inline_script nBack_EEG_Tag
	___run__
	if respEval == 'uncertain':
		btn = self.get('response').encode('utf-8')
	else:
		btn = self.get('response')
	cndclr = self.get('conditionColor').encode('utf-8')
	face = self.get('picture')#.encode('utf-8')
	
	ns.send_event( 'evt_', label="event", timestamp=egi.ms_localtime(), table = {'exp-': 'nBack', 'btn-' : btn, 'eval' : respEval, 'face' : face, 'colr' : cndclr} )
	__end__
	set _prepare ""
	set description "Executes Python code"

define loop Red_net3
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "Empty"
	set break_if "never"
	set column_order ""
	set cycles "0"
	set order "random"
	run Empty

define loop Red_net2
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "Empty"
	set break_if "never"
	set column_order ""
	set cycles "0"
	set order "random"
	run Empty

define inline_script inline_script
	set _run ""
	___prepare__
	import random
	from random import shuffle
	import csv
	
	
	#####import csv files
	#condColors = ['Red', 'Blue', 'White']
	redDict = {}
	blueDict = {}
	whiteDict = {}
	#for color in condColors:
	redDict[u'Red_net2'] = exp.get_file("Red_net2.csv")
	redDict[u'Red_net3'] = exp.get_file("Red_net3.csv")
	redDict[u'Red_null2'] = exp.get_file("Red_null2.csv")
	redDict[u'Red_null3'] = exp.get_file("Red_null3.csv")
	#print redDict
	blueDict['Blue_net2'] = exp.get_file("Blue_net2.csv")
	blueDict['Blue_net3'] = exp.get_file("Blue_net3.csv")
	blueDict['Blue_null2'] = exp.get_file("Blue_null2.csv")
	blueDict['Blue_null3'] = exp.get_file("Blue_null3.csv")
	#print blueDict
	whiteDict['White_net2'] = exp.get_file("White_net2.csv")
	whiteDict['White_net3'] = exp.get_file("White_net3.csv")
	whiteDict['White_null2'] = exp.get_file("White_null2.csv")
	whiteDict['White_null3'] = exp.get_file("White_null3.csv")
	#print whiteDict
	'''
	redDataDict = {}
	dictReader = csv.DictReader(open(redDict[u'Red_net3'], 'rb'))
	print dictReader
	'''
	DictList = [redDict, blueDict, whiteDict]
	for dict in DictList:
		for keys in dict.keys():
	#		print keys, dict[keys]
			dictReader = csv.DictReader(open(dict[keys], 'rb'))
			content = {}
			i = 0
			for row in dictReader:
				#do your processing here
				#print(row)
				content[i] = row
				i += 1
				#print content
			exp.items[keys].matrix = content
			#for key in exp.items[keys].matrix.keys():
				#print exp.items[keys].matrix[key]
	
	
	
	# Extract the column `var1` from the loop item `loop1` and save it as a list
	# as self.experiment.list1 (self.experiment == exp).
	def assortLoop(dataSet, loopA, loopB, loopC, loopD):
		
		loop1 = exp.items[loopA]
		keys = loop1.matrix.keys()
		random.shuffle(keys)
		color_data = exp.items[dataSet]
		next_row = 0
		for key in keys:
	#		print key, loop1.matrix[key]
			color_data.matrix[next_row] = loop1.matrix[key]
			next_row = next_row + 1
			if next_row > 14:
				break
		#for i in sorted(color_data.matrix):
		#	print (color_data.matrix[i])
			
		loop2 = exp.items[loopB]
		keys = loop2.matrix.keys()
		random.shuffle(keys)
		#color_data2 = exp.items[dataSet]
		next_row = 15
		for key in keys:
	#		print key, loop2.matrix[key]
			#color_data2.matrix[next_row] = loop2.matrix[key]
			color_data.matrix[next_row] = loop2.matrix[key]
			next_row = next_row + 1
			if next_row > 29:
				break
		#for i in sorted(color_data2.matrix):
		#	print i, (color_data2.matrix[i])
			
		loop3 = exp.items[loopC]
		keys = loop3.matrix.keys()
		random.shuffle(keys)
		#color_data3 = exp.items[dataSet]
		next_row = 30
		for key in keys:
	#		print key, loop3.matrix[key]
			#color_data3.matrix[next_row] = loop3.matrix[key]
			color_data.matrix[next_row] = loop3.matrix[key]
			next_row = next_row + 1
			if next_row > 44:
				break
		#for i in sorted(color_data3.matrix):
		#	print i, (color_data3.matrix[i])
		
		loop4 = exp.items[loopD]
		keys = loop4.matrix.keys()
		print type(keys), keys
		'''
		###################adding 3 random selections from null3 list to itself
		################### in order to make up for list of < 15
		keys.extend(random.sample(keys, 3))
		'''
		print "keys", keys
		random.shuffle(keys)
		#color_data4 = exp.items[dataSet]
		next_row = 45
		for key in keys:
	#		print key, loop4.matrix[key]
		#	color_data4.matrix[next_row] = loop4.matrix[key]
			color_data.matrix[next_row] = loop4.matrix[key]
			next_row = next_row + 1
			if next_row > 56:
				break
		#for i in sorted(color_data4.matrix):
		#	print i, (color_data4.matrix[i])
	
		#exp.items[dataSet].matrix = dict(color_data.matrix.items() + color_data2.matrix.items() + color_data3.matrix.items() + color_data4.matrix.items())
		#for i in range(60):
		#	print i, exp.items[dataSet].matrix[i]
		print 'end of assortLoop', dataSet
	
	assortLoop('Red_Data', 'Red_net2', 'Red_net3', 'Red_null2', 'Red_null3')
	assortLoop('Blue_Data', "Blue_net2", "Blue_net3", "Blue_null2", "Blue_null3")
	assortLoop('White_Data', "White_net2", "White_net3", "White_null2", "White_null3")
	#print exp.items['Red_Data'].matrix, exp.items['Blue_Data'].matrix, exp.items['White_Data'].matrix
	__end__
	set description "Executes Python code"

define inline_script EEG_task_switch
	___run__
	ns.send_event( 'evt_', label="event", timestamp=egi.ms_localtime(), table = {'task': 'nback_end'} )
	ns.send_event( 'evt_', label="event", timestamp=egi.ms_localtime(), table = {'task': 'NMT_start'} )
	__end__
	___prepare__
	exp.set('timerRepeat', exp.items['NMT_timer'].repeat)
	exp.set('timerCycles', exp.items['NMT_timer'].cycles)
	__end__
	set description "Executes Python code"

define loop White_null2
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "Empty"
	set break_if "never"
	set column_order ""
	set cycles "0"
	set order "random"
	run Empty

define sketchpad iName
	set duration "2000"
	set description "Displays stimuli"
	draw textline 0 -64 "[iName]" center=1 color=white font_family="mono" font_size=42 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline -352 320 "No Relationship" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="[match] = 'm'" html="yes"
	draw textline 352 320 "Has Relationship" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="[match] = 'm'" html="yes"
	draw textline -352 320 "Has Relationship" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="[match] = 'z'" html="yes"
	draw textline 352 320 "No Relationship" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="[match] = 'z'" html="yes"
	draw textline -352 352 "Press Z" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 352 352 "Press M" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"

define sketchpad Timer
	set duration "1000"
	set description "Displays stimuli"
	draw textline 0 0 "[minutes] : [secTens][secOnes]" center=1 color=white font_family="mono" font_size=48 font_italic=no font_bold=yes show_if="always" html="yes"

define sequence Blue_netMemTask
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run Before_EEG "always"
	run Start_EEG_Recording "[egiOn]  =  1"
	run NMT_Welcome "always"
	run NMT_timer "always"
	run nBack_welcome "always"
	run nBack "always"
	run EEG_task_switch "[egiOn]  =  1"
	run NMT_directions "always"
	run Blue_Data "always"
	run End_EEG_Recording "[egiOn]  =  1"
	run End_trials "always"
	run clear_variables "always"

define loop Blue_loop
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "Blue_netMemTask"
	set column_order ""
	set cycles "1"
	set order "random"
	run Blue_netMemTask

define sketchpad nBack_welcome
	set duration "keypress"
	set description "Displays stimuli"
	draw rect -512 -384 1024 768 fill=1 penwidth=1 color=[conditionColor] show_if="always"
	draw image -372 192 "1.bmp" scale=0.5 center=1 show_if="always"
	draw image -180 192 "2.bmp" scale=0.5 center=1 show_if="always"
	draw image 12 192 "3.bmp" scale=0.5 center=1 show_if="always"
	draw image 204 192 "2.bmp" scale=0.5 center=1 show_if="always"
	draw image 396 192 "5.bmp" scale=0.5 center=1 show_if="always"
	draw textline -372 320 "Mismatch" center=1 color=[textColor] font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline -180 320 "Mismatch" center=1 color=[textColor] font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 12 320 "Mismatch" center=1 color=[textColor] font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 204 320 "Match" center=1 color=[textColor] font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 396 320 "Mismatch" center=1 color=[textColor] font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw arrow -96 372 -160 340 penwidth=5 color=[textColor] arrow_size=10 show_if="always"
	draw line 0 340 -96 372 penwidth=5 color=[textColor] show_if="always"
	draw line 128 372 0 340 penwidth=5 color=[textColor] show_if="always"
	draw line 192 340 128 372 penwidth=5 color=[textColor] show_if="always"
	draw textline -172 372 "2" center=1 color=[textColor] font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 20 372 "1" center=1 color=[textColor] font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 -288 "Welcome to the nBack task." center=1 color=[textColor] font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 -224 "You will be presented with a series of faces." center=1 color=[textColor] font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 -96 "otherwise, press [miss]." center=1 color=[textColor] font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 -160 "If the face you see is the same as one shown two faces prior, press [match]," center=1 color=[textColor] font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"

define sequence Red_netMemTask
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run Before_EEG "always"
	run Start_EEG_Recording "[egiOn]  =  1"
	run NMT_Welcome "always"
	run NMT_timer "always"
	run nBack_welcome "always"
	run nBack "always"
	run EEG_task_switch "[egiOn]  =  1"
	run NMT_directions "always"
	run Red_Data "always"
	run End_EEG_Recording "[egiOn]  =  1"
	run End_trials "always"
	run clear_variables "always"

define logger _logger

define loop Red_null2
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "Empty"
	set break_if "never"
	set column_order ""
	set cycles "0"
	set order "random"
	run Empty

define loop Initilization
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "SetButtons"
	set break_if "never"
	set column_order "egiOn;correctButton;srbox_onOff"
	set cycles "1"
	set order "random"
	setcycle 0 srbox_onOff "0"
	setcycle 0 egiOn "0"
	setcycle 0 correctButton ""
	run SetButtons

define srbox srbox
	set allowed_responses "1;4"
	set description "Collects input from a serial response box (Psychology Software Tools) or compatible devices"
	set _dummy "yes"
	set dev "autodetect"
	set correct_response "[correctButton]"
	set timeout "3000"

define loop Blue_null2
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "Empty"
	set break_if "never"
	set column_order ""
	set cycles "0"
	set order "random"
	run Empty

define sketchpad Fixation
	set duration "[ISI]"
	set description "Displays stimuli"
	draw textline 0 0 "+" center=1 color=white font_family="mono" font_size=96 font_italic=no font_bold=no show_if="always" html="yes"

define keyboard_response keyboard_response
	set correct_response "[correctButton]"
	set allowed_responses "z;m"
	set description "Collects keyboard responses"
	set timeout "3000"
	set flush "yes"

define inline_script Start_EEG_Recording
	___run__
	ns.connect('10.0.0.42', 55513) # sample address and port -- change according to your network settings
	ns.BeginSession()    
	ns.sync()
	ns.StartRecording()
	ns.send_event( 'evt_', label="event", timestamp=egi.ms_localtime(), table = {'task': 'nBack_start'} )
	
	
	'''
	print self.get('count_nBack_sequence')
	exp.set('count_nBack_sequence', 0)
	print self.get('count_nBack_sequence')
	print prevPictureList
	'''
	__end__
	___prepare__
	########Prepping variables for nBack
	nBackRound = 0
	prevPictureList = []
	__end__
	set description "Also prepares the prevPictureList variable"

define loop White_null3
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "Empty"
	set break_if "never"
	set column_order ""
	set cycles "0"
	set order "random"
	run Empty

define inline_script end_time
	___run__
	exp_end_time = self.time()
	total_time = exp_end_time - exp_start_time
	total_time = total_time/1000
	exp.set('total_time_seconds', total_time)
	exp.set('total_time_minutes', total_time/60)
	__end__
	set _prepare ""
	set description "Executes Python code"

define inline_script End_EEG_Recording
	___run__
	ns.send_event( 'evt_', label="event", timestamp=egi.ms_localtime(), table = {'task': 'NMT_end'} )
	
	ns.StopRecording()
	ns.EndSession()     
	__end__
	set _prepare ""
	set description "Executes Python code"

define logger NMT_logger
	set ignore_missing "yes"
	set description "Logs experimental data"
	set auto_log "yes"
	set use_quotes "yes"

define keyboard_response PauseKey
	set allowed_responses "p"
	set description "Collects keyboard responses"
	set timeout "0"
	set flush "no"

define inline_script EEG_Initilize
	___run__
	import egi.simple as egi
	ms_localtime = egi.ms_localtime    
	ns = egi.Netstation()
	__end__
	set _prepare ""
	set description "Executes Python code"

define loop loop
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "sequence"
	set break_if "never"
	set column_order "conditionColor;textColor"
	set cycles "3"
	set order "random"
	setcycle 0 textColor "blue"
	setcycle 0 conditionColor "Red"
	setcycle 1 textColor "black"
	setcycle 1 conditionColor "White"
	setcycle 2 textColor "red"
	setcycle 2 conditionColor "Blue"
	run sequence

define sequence White_netMemTask
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run Before_EEG "always"
	run Start_EEG_Recording "[egiOn]  =  1"
	run NMT_Welcome "always"
	run NMT_timer "always"
	run nBack_welcome "always"
	run nBack "always"
	run EEG_task_switch "[egiOn]  =  1"
	run NMT_directions "always"
	run White_Data "always"
	run End_EEG_Recording "[egiOn]  =  1"
	run End_trials "always"
	run clear_variables "always"

